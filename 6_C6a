/*
                // QUESTION 6 //
    Write C++ program using STL for Sorting and searching with user-defined records such 
    as Person Record (Name, birth date, telephone no), person record 
    (person ID, person name, birth_date and telephone_number) 

*/
#include <iostream>    //standard input output stream header file
#include <algorithm>  //The STL algorithms are generic because they can operate on a variety of data structures
#include <vector>    //The header file for the STL vector library is vector.

using namespace std;
class person       
{
      public:   
        char name[10];
        int birth_date;
        int telephone_number;
        int ID;

        bool operator==(const person& i1)    //Boolean operators allow you                                                 
       {
        if(ID==i1.ID)    //operator will return 1 if the comparison is true, or 0                                 
        		  return 1;
        return 0;
    }

    bool operator<(const person& i1)
    {
        if(ID<i1.ID)    //operator will return 1 if the comparison is true, or 0 if  the  
                                         
        		return 1;
        return 0;
    }

};

vector<person> o1;
void print(person &i1);
void display();
void insert();
void search();
void dlt();

bool compare(const person &i1, const person &i2)
{
     return i1.telephone_number < i2.telephone_number;
}

int main()
{
    int ch;
      do
    {  
        cout<<"\n***** Menu *****";
        cout<<"\n1.Insert";
        cout<<"\n2.Display";
        cout<<"\n3.Search";
        cout<<"\n4.Sort";
        cout<<"\n5.Delete";
        cout<<"\n6.Exit";
        cout<<"\nEnter your choice:";
        cin>>ch;
       
        switch(ch)
        {
               case 1:
                          insert();
                          break;
                   
               case 2:
                          display();
                          break;
                   
               case 3:
                         search();
                         break;
                              
               case 4:
                        sort(o1.begin(),o1.end(),compare);
                        cout<<"\n\n Sorted on telephone_number";
                        display();
                        break;
                  
               case 5:
                       dlt();
                        break;
                     
               case 6:
                        exit(0);
        }
   
    }while(ch!=7);

      return 0;
}

void insert()
{
    person i1;
    cout<<"\nEnter person Name:";
    cin>>i1.name;
    cout<<"\nEnter person birth_date:";
    cin>>i1.birth_date;
    cout<<"\nEnter person telephone_number:";
    cin>>i1.telephone_number;
    cout<<"\nEnter person ID:";
    cin>>i1.ID;
    o1.push_back(i1);
}

void display()
{
    for_each(o1.begin(),o1.end(),print);
}

void print(person &i1)
{
     cout<<"\n";
     cout<<"\nperson Name:"<<i1.name;
     cout<<"\nperson birth_date:"<<i1.birth_date;
     cout<<"\nperson telephone_number:"<<i1.telephone_number;
     cout<<"\nperson ID:"<<i1.ID;
}

void search()
{
    vector<person>::iterator p;
    person i1;
    cout<<"\nEnter person ID to search:";
    cin>>i1.ID;
    p=find(o1.begin(),o1.end(),i1);
    if(p==o1.end())
    {
         cout<<"\nNot found.";
    }
    else
    {
         cout<<"\nFound.";
    }
}

void dlt()
{
    vector<person>::iterator p;
    person i1;
    cout<<"\nEnter person ID to delete:";
    cin>>i1.ID;
    p=find(o1.begin(),o1.end(),i1);
    if(p==o1.end())
    {
         cout<<"\nNot found.";
    }
    else
    {
         o1.erase(p);
         cout<<"\nDeleted.";
    }
}

